diff --git a/go1/strconv/atof_test.go b/go1/strconv/atof_test.go
index 3145436..6570e9d 100644
--- a/go1/strconv/atof_test.go
+++ b/go1/strconv/atof_test.go
@@ -158,7 +158,7 @@ func init() {

 	// Generate random inputs for tests and benchmarks
 	rand.Seed(time.Now().UnixNano())
-	if testing.Short() {
+	if true {
 		atofRandomTests = make([]atofSimpleTest, 100)
 	} else {
 		atofRandomTests = make([]atofSimpleTest, 10000)
diff --git a/go1/strconv/ftoa_test.go b/go1/strconv/ftoa_test.go
index 1bcafe3..4ce85f9 100644
--- a/go1/strconv/ftoa_test.go
+++ b/go1/strconv/ftoa_test.go
@@ -180,7 +180,7 @@ func TestAppendFloatDoesntAllocate(t *testing.T) {
 		AppendFloat(buf[:0], 1.23, 'g', 5, 64)
 	})
 	want := 1 // TODO(bradfitz): this might be 0, once escape analysis is better
-	if n != want {
+	if n > want {
 		t.Errorf("with local buffer, did %d allocations, want %d", n, want)
 	}
 	n = numAllocations(func() {
diff --git a/go1/strconv/itoa_test.go b/go1/strconv/itoa_test.go
index 88e8778..4e392ad 100644
--- a/go1/strconv/itoa_test.go
+++ b/go1/strconv/itoa_test.go
@@ -145,7 +145,7 @@ func TestAppendUintDoesntAllocate(t *testing.T) {
 		AppendInt(buf[:0], 123, 10)
 	})
 	want := 1 // TODO(bradfitz): this might be 0, once escape analysis is better
-	if n != want {
+	if n > want {
 		t.Errorf("with local buffer, did %d allocations, want %d", n, want)
 	}
 	n = numAllocations(func() {
diff --git a/go1/bytes/bytes.go b/go1/bytes/bytes.go
index e71b388..af2d9b4 100644
--- a/go1/bytes/bytes.go
+++ b/go1/bytes/bytes.go
@@ -37,10 +37,6 @@ func Compare(a, b []byte) int {
 	return 0
 }

-// Equal returns a boolean reporting whether a == b.
-// A nil argument is equivalent to an empty slice.
-func Equal(a, b []byte) bool
-
 func equalPortable(a, b []byte) bool {
 	if len(a) != len(b) {
 		return false
diff --git a/go1/bytes/bytes_decl.go b/go1/bytes/bytes_decl.go
index 5d2b9e6..cc9b58f 100644
--- a/go1/bytes/bytes_decl.go
+++ b/go1/bytes/bytes_decl.go
@@ -4,5 +4,15 @@

 package bytes

+import "bytes"
+
 // IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s.
-func IndexByte(s []byte, c byte) int // asm_$GOARCH.s
+func IndexByte(s []byte, c byte) int {
+	return bytes.IndexByte(s, c)
+}
+
+// Equal returns a boolean reporting whether a == b.
+// A nil argument is equivalent to an empty slice.
+func Equal(a, b []byte) bool {
+	return bytes.Equal(a, b)
+}
diff --git a/go1/encoding/xml/xml_test.go b/go1/encoding/xml/xml_test.go
index a3cfd2c..d176a87 100644
--- a/go1/encoding/xml/xml_test.go
+++ b/go1/encoding/xml/xml_test.go
@@ -179,6 +179,7 @@ func (d *downCaser) Read(p []byte) (int, error) {

 func TestRawTokenAltEncoding(t *testing.T) {
 	sawEncoding := ""
+	_ = sawEncoding
 	d := NewDecoder(strings.NewReader(testInputAltEncoding))
 	d.CharsetReader = func(charset string, input io.Reader) (io.Reader, error) {
 		sawEncoding = charset
diff --git a/go1/encoding/gob/gobencdec_test.go b/go1/encoding/gob/gobencdec_test.go
index 44d9ee9..788bdcc 100644
--- a/go1/encoding/gob/gobencdec_test.go
+++ b/go1/encoding/gob/gobencdec_test.go
@@ -557,7 +557,7 @@ func (a *isZeroBugArray) GobDecode(data []byte) error {
 }

 func TestGobEncodeIsZero(t *testing.T) {
-	x := isZeroBug{time.Now(), "hello", -55, isZeroBugArray{1, 2}}
+	x := isZeroBug{time.Now().Truncate(1), "hello", -55, isZeroBugArray{1, 2}}
 	b := new(bytes.Buffer)
 	enc := NewEncoder(b)
 	err := enc.Encode(x)
