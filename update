#!/bin/bash

set -e

if [ ! -d _go ]; then
	git clone https://go.googlesource.com/go _go
fi

version=$1

cd _go
git checkout $version
pkg=""
if [ -d ./src/pkg ]; then
	pkg="/pkg"
fi
cd ..

verb="add"
if [ -d $version ]; then
	verb="update"
	rm -rf $version
fi
mkdir $version
cd $version
go mod init rsc.io/xstd/$version
go mod edit -go=1.16

cp -a ../_go/src$pkg/{regexp,sort,strconv,unicode,strings,bytes,io,encoding,text,html} .
rm -rf encoding/asn1 io/fs
for x in testenv cpu cfg godebug fmtsort; do
	if [ -d ../_go/src$pkg/internal/$x ]; then
		mkdir -p internal
		cp -a ../_go/src$pkg/internal/$x internal
		if [ $x = cpu ]; then
			if grep func.Initialize internal/cpu/cpu.go >/dev/null; then
				cp ../cpuinit2.go.txt internal/cpu/cpuinit.go
			fi
			if grep func.initialize internal/cpu/cpu.go >/dev/null; then
				cp ../cpuinit.go.txt internal/cpu/cpuinit.go
			fi
		fi
	fi
done
if [ -d ../_go/src$pkg/internal/bytealg ]; then
	mkdir -p internal/bytealg
	cp ../bytealg.go.txt internal/bytealg/bytealg.go
fi
echo '
X/io\/io.go/ ,s/type ([A-Z].*) interface {\n([^}].*\n)+\}/type \1 = io.\1/g
X/io\/io.go/ ,s/var ([A-Z][^ ]*)( [^ ]*)? = (.*)/var \1\2 = io.\1/g
X ,x/import (\. )?"(.*)"|^	(\. )?"(.*)"( *\/\/.*)?$/ s;"internal/reflectlite";reflectlite "reflect";g
X ,x/import (\. )?"(.*)"|^	(\. )?"(.*)"( *\/\/.*)?$/ s;"(strings|bytes|text/template|text/template/parse|encoding/json|encoding/gob|encoding/xml|encoding/base64|encoding/base32|encoding/binary|encoding/csv|encoding|html/template|html|strconv|regexp|regexp/syntax|sort|unicode/utf16|unicode/utf8|unicode|internal/godebug|internal/testenv|internal/bytealg|internal/fmtsort|internal/cpu|internal/cfg|io|io/ioutil|text/tabwriter|text/scanner)";"rsc.io/xstd/'$version'/\1";g
X/'"'"'/w
' | sam -d $(find . -name '*.go')
rm -f bytes/*.s {strings/strings,bytes/bytes}_{amd64,s390x,arm64}.go
goimports -w .
xtest='
	encoding/binary/example_test.go
	internal/fmtsort/sort_test.go
	html/template/template_test.go
	bytes/reader_test.go
	encoding/json/example_test.go
	strings/reader_test.go
'
if grep 'func Slice.x.any' sort/*.go >/dev/null; then
	for i in $(go list ./... | sed 's;^rsc.io/xstd/go[^/]*;.;'); do
		pkg=$(echo $i | sed 's;.*/;;')
		echo "
			// Copyright 2022 The Go Authors. All rights reserved.
			// Use of this source code is governed by a BSD-style
			// license that can be found in the LICENSE file.

			package $pkg

			type any = interface{}
		" >$i/any.go
	done
	for i in $xtest; do
		if [ -f $i ]; then
			echo 'type any = interface{}' >> $i
		fi
	done
fi
goimports -w .
git add .

patch=""
if [ -e ../patch/$version.patch ]; then
	patch=../patch/$version.patch
else
	v=$(echo $version | sed 's/\.[0-9]*$//; s/\.0$//')
	if [ -e ../patch/$v.patch ]; then
		patch=../patch/$v.patch
	fi
fi
if [ "$patch" != "" ]; then
	patch -p2 < $patch
	git add $patch
fi
goimports -w .
git add .
go test -vet=off ./...

V=$(echo $version | sed 's/go//')
git commit -m "$version: $verb Go $V" . $patch || true

